// lab4.câ€”sbrk-based tiny allocator demo

#define _DEFAULT_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BLOCK_SIZE 128
#define HEAP_SIZE 256
#define BUF_SIZE 64

struct header {
  uint64_t size;
  struct header *next;
};

static void handle_error(const char *msg) {
  perror(msg);
  exit(EXIT_FAILURE);
}

static void print_out(char *format, void *data, size_t data_size) {
  char buffer[BUF_SIZE];
  ssize_t length;

  if (data_size == sizeof(uint64_t)) {
    uint64_t value = *(uint64_t *)data;
    length = snprintf(buffer, BUF_SIZE, format, value);
  } else {
    void *pointer_value = *(void **)data;
    length = snprintf(buffer, BUF_SIZE, format, pointer_value);
  }

  if (length < 0)
    handle_error("snprintf");

  write(STDOUT_FILENO, buffer, length);
}

static void print_block(char *start) {
  for (size_t i = 0; i < BLOCK_SIZE - sizeof(struct header); ++i) {
    char *address = start + sizeof(struct header) + i;
    uint64_t value = (uint8_t)*address;
    print_out("%lu\n", &value, sizeof(value));
  }
}

// set header, memset the data region
static void initialize_block(struct header *block, uint64_t size,
                             struct header *next, int fill_value) {
  block->size = size;
  block->next = next;
  memset((void *)(block + 1), fill_value, size - sizeof(struct header));
}

int main(void) {
  // get program break with sbrk(0) then increase heap by 256
  char *heap_start = sbrk(0);
  if (heap_start == (void *)-1)
    handle_error("sbrk(0)");
  if (sbrk(HEAP_SIZE) == (void *)-1)
    handle_error("sbrk(HEAP_SIZE)");
  struct header *first_block = (struct header *)heap_start;
  struct header *second_block =
      (struct header *)((char *)heap_start + BLOCK_SIZE);

  // initialize blocks
  // first block point to null
  initialize_block(first_block, BLOCK_SIZE, NULL, 0);
  initialize_block(second_block, BLOCK_SIZE, first_block, 1);

  // addresses
  print_out("first block: %p\n", &first_block, sizeof(first_block));
  print_out("second block: %p\n", &second_block, sizeof(second_block));

  // headers
  print_out("first block size: %lu\n", &first_block->size,
            sizeof(first_block->size));
  print_out("first block next: %p\n", &first_block->next,
            sizeof(first_block->next));
  print_out("second block size: %lu\n", &second_block->size,
            sizeof(second_block->size));
  print_out("second block next: %p\n", &second_block->next,
            sizeof(second_block->next));

  // data bytes
  print_block((char *)first_block);
  print_block((char *)second_block);
  return 0;
}
